3. Basic Operations and Numerical Descriptions
Contents

Basic Operations
Basic Numerical Descriptions
Operations on Vectors
We look at some of the basic operations that you can perform on lists of numbers. It is assumed that you know how to enter data or read data files which is covered in the first chapter, and you know about the basic data types.

3.1. Basic Operations
Once you have a vector (or a list of numbers) in memory most basic operations are available. Most of the basic operations will act on a whole vector and can be used to quickly perform a large number of calculations with a single command. There is one thing to note, if you perform an operation on more than one vector it is often necessary that the vectors all contain the same number of entries.

Here we first define a vector which we will call “a” and will look at how to add and subtract constant numbers from all of the numbers in the vector. First, the vector will contain the numbers 1, 2, 3, and 4. We then see how to add 5 to each of the numbers, subtract 10 from each of the numbers, multiply each number by 4, and divide each number by 5.

 a <- c(1,2,3,4)
```{r}
```{r}
```{r}
```{r}
```{r}
We can save the results in another vector called b:

 b <- a - 10
```{r}
If you want to take the square root, find e raised to each number, the logarithm, etc., then the usual commands can be used:

```{r}
```{r}
```{r}
```{r}
By combining operations and using parentheses you can make more complicated expressions:

 c <- (a + sqrt(a))/(exp(2)+1)
```{r}
Note that you can do the same operations with vector arguments. For example to add the elements in vector a to the elements in vector b use the following command:

```{r}
The operation is performed on an element by element basis. Note this is true for almost all of the basic functions. So you can bring together all kinds of complicated expressions:

```{r}
```{r}
```{r}
You need to be careful of one thing. When you do operations on vectors they are performed on an element by element basis. One ramification of this is that all of the vectors in an expression must be the same length. If the lengths of the vectors differ then you may get an error message, or worse, a warning message and unpredictable results:

 a <- c(1,2,3)
 b <- c(10,11,12,13)
```{r}
Warning message:
longer object length
        is not a multiple of shorter object length in: a + b
As you work in R and create new vectors it can be easy to lose track of what variables you have defined. To get a list of all of the variables that have been defined use the ls() command:

```{r}
[6] "tree"         "trees"
Finally, you should keep in mind that the basic operations almost always work on an element by element basis. There are rare exceptions to this general rule. For example, if you look at the minimum of two vectors using the min command you will get the minimum of all of the numbers. There is a special command, called pmin, that may be the command you want in some circumstances:

 a <- c(1,-2,3,-4)
 b <- c(-1,2,-3,4)
```{r}
```{r}
3.2. Basic Numerical Descriptions
Given a vector of numbers there are some basic commands to make it easier to get some of the basic numerical descriptions of a set of numbers. Here we assume that you can read in the tree data that was discussed in a previous chapter. It is assumed that it is stored in a variable called tree:

 tree <- read.csv(file="trees91.csv",header=TRUE,sep=",");
 names(tree)
 [1] "C"      "N"      "CHBR"   "REP"    "LFBM"   "STBM"   "RTBM"   "LFNCC"
 [9] "STNCC"  "RTNCC"  "LFBCC"  "STBCC"  "RTBCC"  "LFCACC" "STCACC" "RTCACC"
[17] "LFKCC"  "STKCC"  "RTKCC"  "LFMGCC" "STMGCC" "RTMGCC" "LFPCC"  "STPCC"
[25] "RTPCC"  "LFSCC"  "STSCC"  "RTSCC"
Each column in the data frame can be accessed as a vector. For example the numbers associated with the leaf biomass (LFBM) can be found using tree$LFBM:

 tree$LFBM

The following commands can be used to get the mean, median, quantiles, minimum, maximum, variance, and standard deviation of a set of numbers:

```{r}
```{r}
 quantile(tree$LFBM)
    0%    25%    50%    75%   100%
0.1300 0.4800 0.7200 1.0075 1.7600
```{r}
```{r}
```{r}
```{r}
Finally, the summary command will print out the min, max, mean, median, and quantiles:

 summary(tree$LFBM)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.
 0.1300  0.4800  0.7200  0.7649  1.0080  1.7600
The summary command is especially nice because if you give it a data frame it will print out the summary for every vector in the data frame:

 summary(tree)
  

3.3. Operations on Vectors
Here we look at some commonly used commands that perform operations on lists. The commands include the sort, min, max, and sum commands. First, the sort command can sort the given vector in either ascending or descending order:

 a = c(2,4,6,3,1,5)
 b = sort(a)
 c = sort(a,decreasing = TRUE)
```{r}
```{r}
```{r}
The min and the max commands find the minimum and the maximum numbers in the vector:

```{r}
```{r}
Finally, the sum command adds up the numbers in the vector:

```{r}
