---
title: "create_tables"
format: html
editor: visual
---

# Create dummy sales dataset

#### Part 1 - Prompt for ChatGPT

i want you to use R programming language to create sample retail dataset for a supermarket series in Jordan.

I want to use this dataset to train my students about descriptive and inferential statistics as well as predictive modelling.

The dataset should include random values according to the following guidlines.

The supermarket sells the following products, include the main category and sub category for each transaction:\
**Health and Beauty**:

-   Skincare Products

-   Hair Care Products

-   Makeup and Cosmetics

-   Fragrances and Perfumes

-   Personal Care Appliances

-   Dietary Supplements

-   Men's Grooming Products

-   Bath and Body Products

-   Oral Care Products

-   Health and Wellness Devices

1.  **Electronic Accessories**:

    -   Mobile Phone Accessories (cases, screen protectors)

    -   Computer Accessories (keyboards, mice, USB hubs)

    -   Audio and Video Accessories (headphones, speakers)

    -   Camera Accessories (tripods, memory cards)

    -   Wearable Technology (smartwatches, fitness trackers)

    -   Charging Accessories (cables, power banks)

    -   Gaming Accessories (controllers, gaming mice)

    -   Car Electronics (car chargers, GPS devices)

    -   Home Office Equipment (printers, shredders)

    -   Electronic Storage Devices (external hard drives, flash drives)

2.  **Home and Lifestyle**:

    -   Home Decor (candles, picture frames)

    -   Kitchenware (cookware, utensils, gadgets)

    -   Bedding and Linens (sheets, comforters)

    -   Bath Accessories (towels, bathmats)

    -   Furniture (chairs, tables, shelves)

    -   Gardening Tools and Decor

    -   Lighting (lamps, light bulbs)

    -   Storage and Organization (bins, shelving units)

    -   Home Improvement Tools

    -   Cleaning Supplies

3.  **Sports and Travel**:

    -   Athletic Apparel (sportswear, swimwear)

    -   Fitness Equipment (weights, yoga mats)

    -   Outdoor Gear (camping equipment, hiking accessories)

    -   Sports Accessories (gloves, helmets)

    -   Travel Accessories (luggage, travel pillows)

    -   Water Sports Equipment (swimming, surfing)

    -   Team Sports Equipment (soccer, basketball)

    -   Cycling Accessories (helmets, bike locks)

    -   Winter Sports Gear (skiing, snowboarding)

    -   Fitness Trackers and Technology

4.  **Food and Beverages**:

    -   Snacks and Confectionery

    -   Beverages (soft drinks, tea, coffee)

    -   Dairy Products

    -   Baked Goods

    -   Canned and Jarred Foods

    -   Condiments and Sauces

    -   Grains and Pasta

    -   Health Foods and Organic Products

    -   Frozen Foods

    -   Specialty Foods (gluten-free, vegan)

5.  **Fashion Accessories**:

    -   Jewelry (necklaces, bracelets, rings)

    -   Handbags and Wallets

    -   Watches

    -   Scarves and Wraps

    -   Hats and Caps

    -   Belts

    -   Sunglasses

    -   Hair Accessories

    -   Ties and Cufflinks

    -   Gloves and Mittens

The supermarket has branches in all the counties/governorates in Jordan.

The counties in jordan are: 1- Amman 2- Zarqa 3- Balqa 4- Madaba 4- Ajloun 5- Jerash 6- Irbid 7- Ramtha 8- Mafraq 9- Karak 10- Tafila 11- Ma'an 12- Aqaba

The dataset should include: invoice-id, branch name, customer id, purchase date, purchase time, product mIn category, product sub category, unit price, quantity, tax amount given that tax is 16% of total price, customer type (member or visitor), customer gender (male, female), payment method (Visa, CliQ, Cash)

You can include any other field you perceive as useful for the retail dataset to enhance the data analysis experience.

Make sure to account for the following requirements while you create the dataset:

-   The dataset should include transactions, where multiple transactions can belong to the same order i.e. have the same invoice id.

-   Around 50% of the transactions include a value in the customer id field and 50% does not include values in the customer id i.e. null values.

-   If customer id is not empty then the customer types will "Customer" otherwise it will be "Single-Purchase Customer".

-   Make sure that the transactions that belongs to the same invoice has also the same customer id.

-   The number of sales for Health and beauty products should be more for women than men.

-   The number of sales for Sports and travel products should be more for men than women.

-   The number of sales in each branch should be proportional to the size of the- population in the county.

-   Here is the population distribution:

-   Governorate Population Irbid 2,050,300 Ajloun 204,000 Jerash 274,500 Mafraq 637,000\
    Balqa 569,500 Amman 4,642,000 Zarqa 1,581,000 Madaba 219,100\
    Karak 366,700 Tafilah 111,500 Ma'an 183,500 Aqaba 217,900

-   The number of clique and visa payments in Amman and Aqaba should be larger than the other governorates.

-   The sales date should cover the period since 2015 till today, showing gradual monthly increase in sales at each branch.

-   Make sure to introduce gradual increase in number of transactions every year, random continous increase every year in all branches. I need to simulate real life scenarios where sales increase maybe because of population growth.

-   Purchase times should be spread around 24 hours.

-   Make sure to give daytime periods more transactions than night time e.g. 70% of transactions happen in daytime.

-   Increase the number of sales for "Fashion accessories" around new year, to simulate the effect of people buying clothes around and before new year

<!-- -->

-   Each branch has invoices numbers that start with 1 and increase according to the number of orders for that branch.

-   Make sure to create sales records in increasing trend between all years, except year 2020 ans 2021 so that i can simulate the effect of sales drop-down because of covid-19 .

-   The invoice id should include the first three letters of the county name along with the sequence number e.g. amm001, zar001, zar002...etc.

-   Make sure to comment each segment of code to clarify what it is doing and how it is doing it.

-   The number of transactions should be proportional to the size of the county.

-   Generate at least 20000 records.

#### Part 2 of the Prompt

let us start by iterating county by county, and within each county, we create a number of orders according to the population size of the county, taking consideration that total number of orders should be around 10000.

Each order contains a random number of transactions, that number is defined according to a normal distribution with a mean of 8 and standard deviation = 3 for customers and a mean of 5 and standard deviation of 6 for non customers

Governorate Population Irbid 2,050,300 Ajloun 204,000 Jerash 274,500 Mafraq 637,000 Balqa 569,500 Amman 4,642,000 Zarqa 1,581,000 Madaba 219,100 Karak 366,700 Tafilah 111,500 Ma'an 183,500 Aqaba 217,900

### Single Product Per Order - ChatGPT 4 Code

```{r}

# Load necessary libraries
library(lubridate)
library(dplyr)

# Set seed for reproducibility
set.seed(123)

# Define parameters
product_lines <- c("Health and beauty", "Electronic accessories", "Home and lifestyle", "Sports and travel", "Food and beverages", "Fashion accessories")
counties <- c("Amman", "Zarqa", "Balqa", "Madaba", "Ajloun", "Jerash", "Irbid", "Ramtha", "Mafraq", "Karak", "Tafila", "Ma'an", "Aqaba")
county_populations <- c(4000000, 1000000, 500000, 200000, 150000, 200000, 1500000, 150000, 300000, 250000, 100000, 50000, 150000)
names(county_populations) <- counties
customer_types <- c("customer", "one-time-buyer")
customer_genders <- c("male", "female")
payment_methods <- c("Visa", "CliQ", "Cash")

# Function to generate a weighted random date-time
random_datetime <- function(start_date, end_date) {
  # Define weights based on the year - higher weights for recent years, except 2020 and 2021
  years <- year(start_date):year(end_date)
  weights <- seq_along(years)  # Linearly increasing weights
  weights[years == 2020] <- weights[years == 2020] / 2  # Halve the weight for 2020
  weights[years == 2021] <- weights[years == 2021] / 2  # Halve the weight for 2021

  # Select a year based on the weights
  selected_year <- sample(years, 1, prob = weights)

  # Generate a random date within the selected year
  start_of_year <- make_datetime(selected_year, 1, 1)
  end_of_year <- make_datetime(selected_year + 1, 1, 1) - seconds(1)
  
  sec <- as.numeric(difftime(end_of_year, start_of_year, units = "secs"))
  as.POSIXct(start_of_year + runif(1, min = 0, max = sec), origin = "1970-01-01")
}

# Function to generate a single record
generate_record <- function(county, invoice_number) {
  purchase_datetime <- random_datetime(as.POSIXct("2015-01-01"), Sys.time())
  
  # Increase probability of selecting "Fashion accessories" around New Year
  if (month(purchase_datetime) == 12 || month(purchase_datetime) == 1) {
    product_lines_weights <- ifelse(product_lines == "Fashion accessories", 2, 1)
    product_line <- sample(product_lines, 1, prob = product_lines_weights)
  } else {
    product_line <- sample(product_lines, 1)
  }

  unit_price <- runif(1, min = 5, max = 100)
  
  customer_type <- sample(customer_types, 1)
  
  # Members tend to buy more quantities than non-members, based on a normal distribution
  if (customer_type == "member") {
    quantity <- round(max(1, rnorm(1, mean = 6, sd = 2)))  # Normal distribution with higher mean for members
  } else {
    quantity <- round(max(1, rnorm(1, mean = 3, sd = 2)))  # Normal distribution with lower mean for non-members
  }
  
  total_price <- unit_price * quantity
  tax_amount <- total_price * 0.16
  
  # Skew gender probability based on branch location
  if (county %in% c("Karak", "Tafila", "Ma'an")) {
    customer_gender <- ifelse(runif(1) < 0.6, "male", "female")  # Higher probability for males
  } else if (county == "Amman") {
    customer_gender <- ifelse(runif(1) < 0.6, "female", "male")  # Higher probability for females
  } else {
    customer_gender <- sample(customer_genders, 1)
  }
  
  # Adjusting for specific conditions (e.g., gender preference for certain product lines)
  if (product_line == "Health and beauty" && runif(1) > 0.4) {
    customer_gender <- "female"
  }
  if (product_line == "Sports and travel" && runif(1) > 0.4) {
    customer_gender <- "male"
  }
  payment_method <- sample(payment_methods, 1)
  # Higher probability of 'visa' and 'clique' payments in Amman and Aqaba
  if (county %in% c("Amman", "Aqaba") && runif(1) > 0.3) {
    payment_method <- sample(c("visa", "clique"), 1)
  }

  return(data.frame(
    invoice_id = sprintf("%s%03d", substr(tolower(county), 1, 3), invoice_number),
    branch_name = county,
    purchase_date = as.Date(purchase_datetime),
    purchase_time = format(purchase_datetime, "%H:%M:%S"),
    product_line = product_line,
    unit_price = unit_price,
    quantity = quantity,
    tax_amount = tax_amount,
    customer_type = customer_type,
    customer_gender = customer_gender,
    payment_method = payment_method
  ))
}

# Generate the dataset
total_records <- 10000
total_population <- sum(county_populations)
records <- list()

# Creating records for each county, proportional to its population
for (county in names(county_populations)) {
  num_records <- round((county_populations[county] / total_population) * total_records)
  for (invoice_number in 1:num_records) {
    records[[length(records) + 1]] <- generate_record(county, invoice_number)
  }
}

# Combine all records into a data frame
retail_dataset <- do.call(rbind, records)

# Display the first few rows
# head(retail_dataset)


write.csv(retail_dataset, "retail_dataset_gpt4.csv", row.names = FALSE)

```

### Multiple Products Per Order - ChatGPT 4 Code

```{r}


```
